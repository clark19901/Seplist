#include <stdio.h>
#include <stdlib.h>

const int OK=1;
const int ERROR=0;
const int maxmum_size=100;
typedef int Elemtype;
typedef struct{
Elemtype Data[maxmum_size];
int last;
}List;

int InitList(List &L)
{L.last = -1;
return OK;
}

void CreatList(List &L,int n)
{
for(int i=0;i<n;i++)
L.Data[i]=2*i;
L.last=n-1;
}

bool ListEmpty(List L)
{if(L.last==-1) return true;
else return false;}

bool ListFull(List L)
{if(L.last==maxmum_size-1) return true;
else return false;}

int Listlast(List L)
{return L.last;}

int GetItem(List L ,int i) //给出位置查数据     还有一个函数是给出数据查位置
{if(i<0||i>L.last) exit(-1);   //exit需要调用stdlib.h
else return L.Data[i];}

int LocateElem(List L,int e)
{for(int i=0;i<=L.last;i++)
if(L.Data[i]==e) return i;
return -1;
}


void InsertList(List &L,int i ,int e)
{int count=L.last;
if(i<0||L.last>=maxmum_size) exit(-1); 
else if(ListFull(L)) exit(-1);
else{while(count>=i)
{L.Data[count+1]=L.Data[count];
count--;}}
L.Data[i]=e;
L.last ++;}

int DeleteList(List &L,int i)  //执行 return  后面的语句不会执行
{int e;
if(i<0||i>L.last) return ERROR;
else if(ListEmpty(L)) return ERROR;
else
{e =L.Data[i];
for(int count=i;count<L.last;count++)
L.Data[count]=L.Data[count+1];}
L.last--;
return e;}  

int PrintList(List L)
{if(ListEmpty(L)) return ERROR;
for(int i=0; i<L.last;i++)
printf("%6d",L.Data[i]);
printf("\n");}


int main()
{
List L;
InitList(L);

 CreatList(L,10); //导入另一组数据
 PrintList( L);
printf("LocateElem(L,14) i=%d\n",LocateElem(L,14));


InsertList(L,5 ,20);
printf("执行InsertList(L,8 ,20)\n ");
PrintList( L);


printf("DeleteList(L,6) e=%d\n",DeleteList(L,6));
PrintList( L);

printf("LocateElem(L,6) i=%d\n",LocateElem(L,6));


printf("GetItem(L ,7 ,e) e=%d\n",GetItem(L ,7));
printf("现在顺序表有%d个值\n",L.last+1);
PrintList(L);
return 0;}

//综合运行结果可知 函数InsertList(List &L,int i ,int e) 和 DeleteList(List &L,int i,int e)
//的时间复杂度为O（n） 这表明顺序表随着其长度的增加,运行插入和删除运行速度会越来越慢 效率低  
// 函数ListEmpty(List L) bool ListFull(List L)  int GetItem(List L ,int i ,int &e) 时间复杂度恒定为O(1) 因此读取数据元素速度快
//顺表表适合应用于插入删除次数较少，读取数据次数较多的程序中  因顺序表使用的是数组存储数据，其数据元素前驱和后继在存储位置上一定相邻 
//因maxmum_size的大小被提前设定好，因此没提前设定好合适的maxmum_size容量数值会导致数据溢出或浪费了一定的存储空间
